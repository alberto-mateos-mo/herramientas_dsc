[
["index.html", "Herramientas Estadísticas para Ciencia de Datos Herramientas Estadísticas para Ciencia de Datos 0.1 Objetivos 0.2 Estructura 0.3 Detalles técnicos Licencia", " Herramientas Estadísticas para Ciencia de Datos Sofía Villers Gómez David Alberto Mateos Montes de Oca Herramientas Estadísticas para Ciencia de Datos Primera edición del libro de texto para el curso Herramientas Estadísticas para Ciencia de Datos del Seminario de Estadística de la Facultad de Ciencias. 0.1 Objetivos Como el título lo indica, a lo largo de este libro se expondrán diferentes modelos estadísticos y sus aplicaciones con un enfoque a Ciencia de Datos. El objetivo es proveer al lector de las herramientas necesarias para comprender los fundamentos de estos modelos y sus aplicaciones mediante el uso del lenguaje R. 0.2 Estructura El libro se descompone en dos grandes secciones, una de ellas enfocada a presentar diferentes paquetes de R considerados de gran utilidad para la práctica de Ciencia de Datos, la otra se enfoca en la teoría y aplicación de diferentes modelos. La estructura del libro sigue el orden en que se imparte la materia en la Facultad de Ciencias sin embargo hemos diseñado los capítulos suficientemente independientes como para ser consultados en el orden de preferencia del lector. 0.3 Detalles técnicos Este libro fue escrito con bookdown usando RStudio. Esta versión fue escrita con: ## Finding R package dependencies ... Done! ## setting value ## version R version 4.0.0 (2020-04-24) ## os Windows 10 x64 ## system x86_64, mingw32 ## ui RStudio ## language (EN) ## collate Spanish_Mexico.1252 ## ctype Spanish_Mexico.1252 ## tz America/Mexico_City ## date 2020-06-08 Licencia This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. This is a human-readable summary of (and not a substitute for) the license. Please see https://creativecommons.org/licenses/by-sa/4.0/legalcode for the full legal text. You are free to: Share—copy and redistribute the material in any medium or format Remix—remix, transform, and build upon the material for any purpose, even commercially. The licensor cannot revoke these freedoms as long as you follow the license terms. Under the following terms: Attribution—You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. ShareAlike—If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original. No additional restrictions—You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. Notices: You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. "],
["instalando-r-y-rstudio.html", "Capítulo 1 Instalando R y RStudio 1.1 R y RStudio 1.2 RStudio Cloud 1.3 Recursos adicionales", " Capítulo 1 Instalando R y RStudio 1.1 R y RStudio Instala R, a free software environment for statistical computing and graphics desde el CRAN de acuerdo a tu sistema operativo. Instala el entorno de desarrollo integrado RStudio Si previamente habías instalado alguna versión de R y RStudio en tu computadora, sugerimos reinstalar ambos para tener las versiones más actualizadas. 1.2 RStudio Cloud Aunque a lo largo del libro se mostrará a detalle el código de R usado, también proveeremos de links a proyectos de RStudio Cloud para facilitar reproducir los resultados aquí mostrados. Para acceder a tales proyectos será necesario contar con una cuenta en RStudio Cloud. 1.3 Recursos adicionales Si no estás del todo familiarizado con el lenguaje, te recomendamos lo siguientes recursos donde podrás encontrar información útil sobre R y RStudio. Cómo usar RStudio RStudio para el aprendizaje de R R: Preguntas Frecuentes R: Instalación y administración "],
["conocimientos-básicos-de-r.html", "Capítulo 2 Conocimientos básicos de R 2.1 Buscando ayuda 2.2 Vectores 2.3 El ambiente (environment). 2.4 Lectura y escritura de archivos 2.5 Algunas funciones variadas 2.6 Objetos 2.7 Algunos ejemplos más avanzados 2.8 Paquetes", " Capítulo 2 Conocimientos básicos de R 2.1 Buscando ayuda Por sí mismo, R cuenta con funciones que nos permitirán obtener ayuda sobre R en general pero también sobre las diferentes funciones que estemos usando para resolver algún problema. Para mostrar un manual de ayuda general en formato HTML corremos el siguiente código en la consola: help.start() El manual será mostrado en el panel de ayuda dentro de RStudio pero puede abrirse con el navegador en caso de que así lo deseemos. Supongamos ahora que dentro de nuestro flujo de trabajo estamos utilizando la funcíón log() sin embargo no estamos familiarizados con ella y deseamos obtener ayuda sobre el uso de la función. Para a tener acceso a la documentación de la función podemos usar alguna de las siguientes líneas de código: help(log) ?log En el caso particular de RStudio, existe un atajo con el que podemos abrir la documentación de cualquier función sin necesidad de correr alguna de las líneas anteriores en la consola. El atajo consiste de colocar el cursor de texto entre cualesquiera caractéres de la función y presionar el botón F1 de nuestro teclado. Adicionalmente tenemos las siguientes funciones: apropos(&quot;plot&quot;) help.search(&quot;plot&quot;) apropos() nos ayudará a encontrar las funciones que incluyan el texto (en este caso plot) en su nombre. Por otro lado, help.search() nos mostrará la documentación de las funciones que incluyan el texto, en este caso plot. Como se indica, cualquiera de esas opciones te permitirá tener acceso a la documentación de la funciones donde podrás encontrar: para qué se usan, qué argumentos necesitan, lo que regresan y algunos ejemplos del uso de las mismas. Una buena parte de los errores que podamos encontrarnos en nuestros flujos de trabajo se resolverán al revisar la documentación de la función que esté generando el error, sin embargo habrá ocasiones en las que los errores sean más complejos y la documentación no nos dará una buena pista de cómo remediarlos, en tal caso la mejor estrategía sera utilizar tu buscador favorito para buscar el error. Será tan fácil cómo copiar el error que la consola esté arrojando y ponerlo en la barra de búsqueda de e.g. Google. 2.2 Vectores Quizá ya hayas escuchado lo siguiente en algún lado: R es un lenguaje vectorial. El comportamiento al que hace referencia esta frase será de mucha ayuda en la construcción de rutinas avanzadas de programación que veremos más adelante, por ahora la implicación más relevante reside en el hecho de que la estructura básica en R serán justamente vectores. Los siguientes ejemplos nos muestran cómo crear vectores numéricos en R: roma &lt;- c(0.1, 0.2, 0.3) assign(&quot;mora&quot;, c(0.4, 0.5, 0.6)) c(0.7, 0.8, 0.9) -&gt; z mora &lt;- c(roma, 0, 0, 0, roma) N.B. Los vectores en R no solo pueden ser numéricos también los hay aquellos con cadenas de texto. En seguida vemos algunos ejemplos que nos permitirán acceder a elementos de un vector: mora[3] ## [1] 0.3 mora[-3] ## [1] 0.1 0.2 0.0 0.0 0.0 0.1 0.2 0.3 mora[c(1,5,7)] ## [1] 0.1 0.0 0.1 2.2.1 Arítmetica de vectores El siguiente ejemplo muestra el comportamiento asociado a un lenguaje vectorial que mencionabamos anteriormente: v &lt;- 2*roma+mora+1 v ## [1] 1.3 1.6 1.9 1.2 1.4 1.6 1.3 1.6 1.9 Existen una enorme cantidad de funciones para manipular los datos dentro de nuestros vectores, en seguida se muestran algunas: sum(v) ## suma todos los elementos del objeto prod(v) ## multiplica todos los elementos del objeto max(v) ## encuentra el valor máximo min(v) ## encuentra el valor mínimo which.max(v) ## índice o posición del máximo which.min(v) ## índice o posición del mínimo range(v) ## vector de dos entradas con el mínimo y máximo respectivamente 2.3 El ambiente (environment). Los objetos que guardemos o asignemos en nuestros flujos de trabajo serán almacenados en un espacio de memoria que se llama ambiente o en inglés environment. Desde RStudio podremos ver lo que se guardado en este espacio de memoria en el panel Environment. Adicional a ello, existen algunas funciones que nos permiten explorar nuestro ambiente: ## Muestra los nombres de los objetos en memoria ls() ## Muestra las variables con cierta serie de caracteres en su nombre ls(pat=&quot;m&quot;) ## Muestra las variables las cuales su nombre empieza con el caracter dado ls(pat=&quot;^m&quot;) ## Muestra detalles de los objetos en memoria ls.str() ## Eliminar todas las variables de &#39;Global Environment&#39; rm(list=ls()) ## Eliminar únicamente variables que empiezan con la letra m rm(list=ls(pat=&quot;^m&quot;)) ## Tipo de elementos del objeto v mode(v) ## Longitud del objeto v length(v) 2.4 Lectura y escritura de archivos En cuanto a archivos externos, a lo largo del libro únicamente usaremos archivos con extensiones .csv y .txt sin embargo R no está limitado a este tipo de archivos, existen una amplia variedad de formatos que se pueden leer a través de paquetes diseñados específicamente para ese fin. El siguiente ejemplo muestra cómo se haría la lectura de un archivo con extensión .txt: datos&lt;-read.table(&quot;data.txt&quot;, # nombre del archivo (con extensión) entre comillas header = TRUE, # TRUE o FALSE, indicando si el archivo tiene como primer renglón el nombre de las columnas sep=&quot;\\t&quot; # separador de los campos ) Una vez que leemos el archivo externo en R, el objeto donde se almacenará la información será de tipo data.frame. Muchas veces será de nuestro interés exportar objetos data.frame a archivos externos, tal objetivo lo podemos lograr con alguna de las siguientes dos opciones: write.table(datos, &quot;toma.txt&quot;, append=F, sep=&quot;\\t&quot;) write.csv(datos, &quot;toma2.csv&quot;) N:B. Como en la lectura de datos, R no está limitado a exportar archivos .csv o .txt también existe una amplia variedad de formatos que podemos generar. 2.5 Algunas funciones variadas A continuación se muestra un conjunto bastante pequeño de funciones que nos ayudarán a alcanzar distintos objetivos: ## Generar un vector con valores subsecuentes x &lt;- 1:30 ## Generar un vector con cierta secuencia y &lt;- seq(1, 5, 0.5) w &lt;- seq(10, 0, -0.5) ## Genera un vector que repite un dato cierto número de veces z &lt;- rep(1, 20) ## Genera un vector con series valores subsecuentes hasta los números indicados q &lt;- sequence(3:5) q &lt;- sequence(c(10, 5)) ## Genera series regulares de factores dados. q &lt;- gl(3, 5, length = 30) q &lt;- gl(2, 6, label = c(&quot;Hombre&quot;,&quot;Mujer&quot;)) ## A diferencia de los anteriores, la siguiente función genera un data frame con todas las ## posible combinaciones de vectores o factores dados como argumentos q &lt;- expand.grid(h = c(60, 80), w = c(100, 300), sex = c(&quot;Hombre&quot;, &quot;Mujer&quot;)) 2.6 Objetos Los ejemplos anteriores consisten en el uso de funciones, dichas funciones generan cierto tipo de objetos para regresar el resultado. Si queremos crear de manera manual cierto tipo de objetos, podemos hacerlo de la siguiente manera: 2.6.1 Vectores ## Vector (numeric, logical, character) a &lt;- vector(mode= &quot;logical&quot;, length=5) b &lt;- logical(length=5) 2.6.2 Factores a &lt;- factor(1:3, labels = c(&quot;Hola&quot;, &quot;Adios&quot;, &quot;Ah&quot;)) b&lt;- factor(x = c(2, 5), levels = 2:5) c &lt;- factor(1:5, exclude = 4) 2.6.3 Matrices a &lt;- matrix(1:6, 2, 3, byrow = F) ## Otra forma de crear una matriz b &lt;- 1:15 dim(b) &lt;- c(5,3) 2.6.4 Data Frames x &lt;- 1:4 n &lt;- 10 M &lt;- c(10, 35) a &lt;- data.frame(x, n, M) 2.6.5 Listas a &lt;- list(x, M) b &lt;- list(A = x, B = M) 2.6.6 Expresiones x &lt;- 3 y &lt;- 2.5 z &lt;- 1 exp &lt;- expression(x/(y + exp(z))) 2.7 Algunos ejemplos más avanzados 2.7.1 Operadores Aritméticos Comparación Lógicos Suma (+) Menor que (&lt;) NOT (!) Resta (-) Mayor que (&gt;) AND (&amp;) Multiplicación (*) Menor o igual que (&lt;=) OR (|) División (/) Mayor o igual que (&gt;=) Cierto (TRUE) Potencia (^) Igual (==) Falso (FALSE) Modulo (%%) Diferente (!=) División entera (%/%) 2.7.2 Ciclos, condiciones y funciones Al ser R un lenguaje de programación podemos usar: ciclos ## Ciclo for for (anio in c(2000,2001,2002,2003,2004,2005,2006,2007)){ print(paste(&quot;Cuenta&quot;,anio)) } ## Ciclo while i &lt;- 1 while(i &lt; 10){ print(i) i &lt;- i+1 } condiciones for (i in 1:10){ ## Condición if if(!i %% 2){ next } print(i) } Particularmente en la programación con R, será de mucha utilidad aprender a crear funciones: funcionfactorial&lt;-function(a){ res &lt;- 1 if(a&lt;0){ return(&quot;No existen factoriales de números negativos.&quot;) } else if(a==0){ return(res) } else{ for(i in 1:a){ res &lt;- res*i } return(res) } } 2.8 Paquetes En R llamamos librerías o paquetes a conjuntos de funciones diseñados para un fin específico. Por ejemplo el paquete ggplot2 contiene funciones diseñadas para crear gráficos usando una sintáxis llamada la gramática de gráficas. Para descargar alguna librería de nuestra interés debemos utilizar el siguiente código: install.packages(&quot;ggplot2&quot;) # Dentro de las comillas ponemos el nombre del paquete que queremos instalar Dado que se trata de una instalación, el código anterior solamente será necesario la primera vez que instalemos el paquete. Una vez instalado, necesitamos hacer que R sepa que queremos usar la funciones de ese paquete, para lo cual usamos el siguiente código: library(ggplot2) # El argumento de la función será el nombre del paquete previamente instalado "],
["notación.html", "Capítulo 3 Notación", " Capítulo 3 Notación A lo largo del libro usaremos la notación típica de estadística per también haremos uso de la siguiente: \\(x^{(i)}\\): el conjunto de inputs (variables explicativas) \\(y^{(i)}\\): es la variable de output/salida (variable dependiente) que queremos predecir (ajustar) A la pareja \\((x^{(i)},y^{(i)})\\) le llamaremos ejemplo de entrenamiento El conjunto de entrenamiento se denota por: \\(\\{(x^{(i)},y^{(i)})|i\\in N\\}\\) De forma general, denotaremos por \\(\\mathcal{X}\\) al espacio de inputs y por \\(\\mathcal{Y}\\) al espacio de outputs N.B. Omitiremos el uso de indices en donde sea claro a qué nos referimos. "],
["glosario-dscml-estadística.html", "Capítulo 4 Glosario DSc/ML - Estadística", " Capítulo 4 Glosario DSc/ML - Estadística Machine Learning / Ciencia de Datos Estadística red, grafo (network, graphs) modelo (model) pesos (weigths) parámetros (parameters) aprendizaje (learning) ajuste (fiting) prueba, generalización (testing, generalization) ajuste en el conjunto de prueba aprendizaje supervisado (supervised learning) regresión, clasificación aprendizaje no supervisado (unsupervised learning) estimación de densidades, clusterización "],
["entrenamiento-de-modelos.html", "Capítulo 5 Entrenamiento de modelos", " Capítulo 5 Entrenamiento de modelos Se le denomina de esta manera a la acción de ajustar el mejor modelo a los datos. Formalmente se define como sigue: Dado un conjunto de entrenamiento \\((x^{(i)},y^{(i)})\\in(\\mathcal{X} \\times \\mathcal{Y})\\) el objetivo es “aprender” (ajustar) una función \\(h:\\mathcal{X}\\rightarrow \\mathcal{Y}\\) tal que \\(h(x)\\) sea un “buen predictor” de \\(y\\). La función \\(h\\) suele llamarse “hipótesis”. Cuando el conjunto \\(\\mathcal{Y}\\) es continuo, estamos frente a un problema de regresión. Si se trata de un conjunto discreto* entonces tenemos un problema de clasificación. "],
["regresión-lineal.html", "Capítulo 6 Regresión Lineal 6.1 Un poco de história 6.2 Objetivos del análisis de regresión 6.3 El algorítmo de regresión lineal 6.4 Regresión lineal simple", " Capítulo 6 Regresión Lineal 6.1 Un poco de história Los primeros problemas prácticos tipo regresión iniciaron en el siglo XVIII, relacionados con la navegación basada en la Astronomía. Legendre desarrolló el método de mínimo cuadrados en 1805. Gauss afirma que él desarrolló este método algunos años antes y demuestra, en 1809, que mínimos cuadrados proporciona una solución óptima cuando los errores se distribuyen normal. Francis Galton acuña el término regresión al utilizar el modelo para explicar el fenómeno de que los hijos de padres altos, tienden a ser altos en su generación, pero no tan altos como lo fueron sus padres en la propia, por lo que hay un efecto de regresión. El modelo de regresión lineal es, probablemente, el modelo de su tipo más conocido en estadística. El modelo de regresión se usa para explicar o modelar la relación entre una sola variable, \\(y\\), llamada dependiente o respuesta, y una o más variables predictoras, independientes, covariables, o explicativas, \\(x_1, x_2, ..., x_p\\). Si \\(p = 1\\), se trata de un modelo de regresión simple y si \\(p &gt; 1\\), de un modelo de regresión múltiple. En este modelo se asume que la variable de respuesta, \\(y\\), es aleatoria y las variables explicativas son fijas, es decir, no aleatorias. La variable de respuesta debe ser continua, pero los regresores pueden tener cualquier escala de medición. 6.2 Objetivos del análisis de regresión Existen varios objetivos dentro del análisis de regresión, entre otros: Determinar el efecto, o relación, entre las variables explicativas y la respuesta. Predicción de una observación futura. Describir de manera general la estructura de los datos. 6.3 El algorítmo de regresión lineal Sea \\(\\Phi: \\mathcal{X} \\rightarrow \\mathbb{R}^N\\) y consideremos la familia de hipótesis lineales \\[H=\\{x\\mapsto w \\cdot \\Phi(x)+b | w\\in\\mathbb{R}^N, b\\in\\mathbb{R}\\}\\] La regresión lineal consiste en buscar la hipótesis \\(h\\in H\\) con el menor error cuadrático medio, es decir, se debe resolver el problema de optimización: \\[\\min \\frac{1}{m}\\sum_{i=1}^{m}(h(x_i)-y_i)^2\\] 6.4 Regresión lineal simple require(ggplot2) x &lt;- c(609, 629, 620, 564, 645, 493, 606, 660, 630, 672, 778, 616, 727, 810, 778, 823, 755, 710, 701, 803, 855, 838, 830, 864, 635, 565, 562, 580, 596, 597, 636, 559, 615, 740, 677, 675, 629, 692, 710, 730, 763, 686, 717, 737, 816) y &lt;- c(241, 222, 233, 207, 247, 189, 226, 240, 215, 231, 263, 220, 271, 284, 279, 272, 268, 278, 238, 255, 308, 281, 288, 306, 236, 204, 216, 225, 220, 219, 201, 213, 228, 234, 237, 217, 211, 238, 221, 281, 292, 251, 231, 275, 275) ggplot(data.frame(x = x, y = y))+ geom_point(aes(x, y), colour = &quot;#f6583a&quot;, size = 6)+ geom_smooth(aes(x, y), method = &quot;lm&quot;, se = FALSE, colour = &quot;#85037e&quot;, size = 2)+ theme_minimal()+ labs(y = &quot;y&quot;, x = bquote(Phi(x))) Para este modelo supondremos que nuestra respuesta, \\(y\\), es explicada únicamente por una covariable, \\(x\\). Entonces, escribimos nuestro modelo como: \\[y^{(i)}=\\beta_0+\\beta_1x^{(i)}+\\epsilon^{(i)},\\ \\ i=1,2,\\dots,n\\] Como podemos observar, se ha propuesto una relación lineal entre la variable \\(y\\) y la variable explicativa \\(x\\), que es nuestro primer supuesto sobre el modelo: La relación funcional entre \\(x\\) y \\(y\\) es una línea recta. Observamos que la relación no es perfecta, ya que se agrega el término de error, \\(\\epsilon\\). Dado que la parte aleatoria del modelo es la variable \\(y\\), asumimos que al error se le “cargan” los errores de medición de \\(y\\), así como las perturbaciones que le pudieran ocasionar los términos omitidos en el modelo. Gauss desarrolló este modelo a partir de la teoría de errores de medición, que es de donde se desprenden los supuestos sobre este término: \\(\\mathbb{E}(\\epsilon^{(i)})=0\\) \\(\\mathbb{V}ar(\\epsilon^{(i)})=\\sigma^2\\) \\(\\mathbb{C}ov(\\epsilon^{(i)},\\epsilon^{(j)})=0, \\ \\forall i\\neq j\\) N.B. Los errores \\(\\epsilon^{(i)}\\) son variables aleatorias no observables. "],
["regresión-logística.html", "Capítulo 7 Regresión logística", " Capítulo 7 Regresión logística "],
["modelos-lineales-generalizados.html", "Capítulo 8 Modelos lineales generalizados", " Capítulo 8 Modelos lineales generalizados "]
]
