[
["index.html", "Herramientas Estadísticas para Ciencia de Datos Herramientas Estadísticas para Ciencia de Datos 0.1 Objetivos 0.2 Estructura 0.3 Detalles técnicos Licencia", " Herramientas Estadísticas para Ciencia de Datos Sofía Villers Gómez David Alberto Mateos Montes de Oca Herramientas Estadísticas para Ciencia de Datos Primera edición del libro de texto para el curso Herramientas Estadísticas para Ciencia de Datos del Seminario de Estadística de la Facultad de Ciencias. 0.1 Objetivos Como el título lo indica, a lo largo de este libro se expondrán diferentes modelos estadísticos y sus aplicaciones con un enfoque a Ciencia de Datos. El objetivo es proveer al lector de las herramientas necesarias para comprender los fundamentos de estos modelos y sus aplicaciones mediante el uso del lenguaje R. 0.2 Estructura El libro se descompone en dos grandes secciones, una de ellas enfocada a presentar diferentes paquetes de R considerados de gran utilidad para la práctica de Ciencia de Datos, la otra se enfoca en la teoría y aplicación de diferentes modelos. La estructura del libro sigue el orden en que se imparte la materia en la Facultad de Ciencias sin embargo hemos diseñado los capítulos suficientemente independientes como para ser consultados en el orden de preferencia del lector. 0.3 Detalles técnicos Este libro fue escrito con bookdown usando RStudio. Esta versión fue escrita con: ## Finding R package dependencies ... Done! ## setting value ## version R version 4.0.0 (2020-04-24) ## os Windows 10 x64 ## system x86_64, mingw32 ## ui RStudio ## language (EN) ## collate Spanish_Mexico.1252 ## ctype Spanish_Mexico.1252 ## tz America/Mexico_City ## date 2020-09-04 Licencia This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. This is a human-readable summary of (and not a substitute for) the license. Please see https://creativecommons.org/licenses/by-sa/4.0/legalcode for the full legal text. You are free to: Share—copy and redistribute the material in any medium or format Remix—remix, transform, and build upon the material for any purpose, even commercially. The licensor cannot revoke these freedoms as long as you follow the license terms. Under the following terms: Attribution—You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. ShareAlike—If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original. No additional restrictions—You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. Notices: You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. "],
["instalando-r-y-rstudio.html", "Capítulo 1 Instalando R y RStudio 1.1 R y RStudio 1.2 RStudio Cloud 1.3 Recursos adicionales", " Capítulo 1 Instalando R y RStudio 1.1 R y RStudio Instala R, a free software environment for statistical computing and graphics desde el CRAN de acuerdo a tu sistema operativo. Instala el entorno de desarrollo integrado RStudio Si previamente habías instalado alguna versión de R y RStudio en tu computadora, sugerimos reinstalar ambos para tener las versiones más actualizadas. 1.2 RStudio Cloud Aunque a lo largo del libro se mostrará a detalle el código de R usado, también proveeremos de links a proyectos de RStudio Cloud para facilitar reproducir los resultados aquí mostrados. Para acceder a tales proyectos será necesario contar con una cuenta en RStudio Cloud. 1.3 Recursos adicionales Si no estás del todo familiarizado con el lenguaje, te recomendamos lo siguientes recursos donde podrás encontrar información útil sobre R y RStudio. Cómo usar RStudio RStudio para el aprendizaje de R R: Preguntas Frecuentes R: Instalación y administración "],
["conocimientos-básicos-de-r.html", "Capítulo 2 Conocimientos básicos de R 2.1 Buscando ayuda 2.2 Vectores 2.3 El ambiente (environment). 2.4 Lectura y escritura de archivos 2.5 Algunas funciones variadas 2.6 Objetos 2.7 Algunos ejemplos más avanzados 2.8 Paquetes", " Capítulo 2 Conocimientos básicos de R 2.1 Buscando ayuda Por sí mismo, R cuenta con funciones que nos permitirán obtener ayuda sobre R en general pero también sobre las diferentes funciones que estemos usando para resolver algún problema. Para mostrar un manual de ayuda general en formato HTML corremos el siguiente código en la consola: help.start() El manual será mostrado en el panel de ayuda dentro de RStudio pero puede abrirse con el navegador en caso de que así lo deseemos. Supongamos ahora que dentro de nuestro flujo de trabajo estamos utilizando la funcíón log() sin embargo no estamos familiarizados con ella y deseamos obtener ayuda sobre el uso de la función. Para a tener acceso a la documentación de la función podemos usar alguna de las siguientes líneas de código: help(log) ?log En el caso particular de RStudio, existe un atajo con el que podemos abrir la documentación de cualquier función sin necesidad de correr alguna de las líneas anteriores en la consola. El atajo consiste de colocar el cursor de texto entre cualesquiera caractéres de la función y presionar el botón F1 de nuestro teclado. Adicionalmente tenemos las siguientes funciones: apropos(&quot;plot&quot;) help.search(&quot;plot&quot;) apropos() nos ayudará a encontrar las funciones que incluyan el texto (en este caso plot) en su nombre. Por otro lado, help.search() nos mostrará la documentación de las funciones que incluyan el texto, en este caso plot. Como se indica, cualquiera de esas opciones te permitirá tener acceso a la documentación de la funciones donde podrás encontrar: para qué se usan, qué argumentos necesitan, lo que regresan y algunos ejemplos del uso de las mismas. Una buena parte de los errores que podamos encontrarnos en nuestros flujos de trabajo se resolverán al revisar la documentación de la función que esté generando el error, sin embargo habrá ocasiones en las que los errores sean más complejos y la documentación no nos dará una buena pista de cómo remediarlos, en tal caso la mejor estrategía sera utilizar tu buscador favorito para buscar el error. Será tan fácil cómo copiar el error que la consola esté arrojando y ponerlo en la barra de búsqueda de e.g. [Google][google]. 2.2 Vectores Quizá ya hayas escuchado lo siguiente en algún lado: R es un lenguaje vectorial. El comportamiento al que hace referencia esta frase será de mucha ayuda en la construcción de rutinas avanzadas de programación que veremos más adelante, por ahora la implicación más relevante reside en el hecho de que la estructura básica en R serán justamente vectores. Los siguientes ejemplos nos muestran cómo crear vectores numéricos en R: roma &lt;- c(0.1, 0.2, 0.3) assign(&quot;mora&quot;, c(0.4, 0.5, 0.6)) c(0.7, 0.8, 0.9) -&gt; z mora &lt;- c(roma, 0, 0, 0, roma) N.B. Los vectores en R no solo pueden ser numéricos también los hay aquellos con cadenas de texto. En seguida vemos algunos ejemplos que nos permitirán acceder a elementos de un vector: mora[3] ## [1] 0.3 mora[-3] ## [1] 0.1 0.2 0.0 0.0 0.0 0.1 0.2 0.3 mora[c(1,5,7)] ## [1] 0.1 0.0 0.1 2.2.1 Arítmetica de vectores El siguiente ejemplo muestra el comportamiento asociado a un lenguaje vectorial que mencionabamos anteriormente: v &lt;- 2*roma+mora+1 v ## [1] 1.3 1.6 1.9 1.2 1.4 1.6 1.3 1.6 1.9 Existen una enorme cantidad de funciones para manipular los datos dentro de nuestros vectores, en seguida se muestran algunas: sum(v) ## suma todos los elementos del objeto prod(v) ## multiplica todos los elementos del objeto max(v) ## encuentra el valor máximo min(v) ## encuentra el valor mínimo which.max(v) ## índice o posición del máximo which.min(v) ## índice o posición del mínimo range(v) ## vector de dos entradas con el mínimo y máximo respectivamente 2.3 El ambiente (environment). Los objetos que guardemos o asignemos en nuestros flujos de trabajo serán almacenados en un espacio de memoria que se llama ambiente o en inglés environment. Desde RStudio podremos ver lo que se guardado en este espacio de memoria en el panel Environment. Adicional a ello, existen algunas funciones que nos permiten explorar nuestro ambiente: ## Muestra los nombres de los objetos en memoria ls() ## Muestra las variables con cierta serie de caracteres en su nombre ls(pat=&quot;m&quot;) ## Muestra las variables las cuales su nombre empieza con el caracter dado ls(pat=&quot;^m&quot;) ## Muestra detalles de los objetos en memoria ls.str() ## Eliminar todas las variables de &#39;Global Environment&#39; rm(list=ls()) ## Eliminar únicamente variables que empiezan con la letra m rm(list=ls(pat=&quot;^m&quot;)) ## Tipo de elementos del objeto v mode(v) ## Longitud del objeto v length(v) 2.4 Lectura y escritura de archivos En cuanto a archivos externos, a lo largo del libro únicamente usaremos archivos con extensiones .csv y .txt sin embargo R no está limitado a este tipo de archivos, existen una amplia variedad de formatos que se pueden leer a través de paquetes diseñados específicamente para ese fin. El siguiente ejemplo muestra cómo se haría la lectura de un archivo con extensión .txt: datos&lt;-read.table(&quot;data.txt&quot;, # nombre del archivo (con extensión) entre comillas header = TRUE, # TRUE o FALSE, indicando si el archivo tiene como primer renglón el nombre de las columnas sep=&quot;\\t&quot; # separador de los campos ) Una vez que leemos el archivo externo en R, el objeto donde se almacenará la información será de tipo data.frame. Muchas veces será de nuestro interés exportar objetos data.frame a archivos externos, tal objetivo lo podemos lograr con alguna de las siguientes dos opciones: write.table(datos, &quot;toma.txt&quot;, append=F, sep=&quot;\\t&quot;) write.csv(datos, &quot;toma2.csv&quot;) N:B. Como en la lectura de datos, R no está limitado a exportar archivos .csv o .txt también existe una amplia variedad de formatos que podemos generar. 2.5 Algunas funciones variadas A continuación se muestra un conjunto bastante pequeño de funciones que nos ayudarán a alcanzar distintos objetivos: ## Generar un vector con valores subsecuentes x &lt;- 1:30 ## Generar un vector con cierta secuencia y &lt;- seq(1, 5, 0.5) w &lt;- seq(10, 0, -0.5) ## Genera un vector que repite un dato cierto número de veces z &lt;- rep(1, 20) ## Genera un vector con series valores subsecuentes hasta los números indicados q &lt;- sequence(3:5) q &lt;- sequence(c(10, 5)) ## Genera series regulares de factores dados. q &lt;- gl(3, 5, length = 30) q &lt;- gl(2, 6, label = c(&quot;Hombre&quot;,&quot;Mujer&quot;)) ## A diferencia de los anteriores, la siguiente función genera un data frame con todas las ## posible combinaciones de vectores o factores dados como argumentos q &lt;- expand.grid(h = c(60, 80), w = c(100, 300), sex = c(&quot;Hombre&quot;, &quot;Mujer&quot;)) 2.6 Objetos Los ejemplos anteriores consisten en el uso de funciones, dichas funciones generan cierto tipo de objetos para regresar el resultado. Si queremos crear de manera manual cierto tipo de objetos, podemos hacerlo de la siguiente manera: 2.6.1 Vectores ## Vector (numeric, logical, character) a &lt;- vector(mode= &quot;logical&quot;, length=5) b &lt;- logical(length=5) 2.6.2 Factores a &lt;- factor(1:3, labels = c(&quot;Hola&quot;, &quot;Adios&quot;, &quot;Ah&quot;)) b&lt;- factor(x = c(2, 5), levels = 2:5) c &lt;- factor(1:5, exclude = 4) 2.6.3 Matrices a &lt;- matrix(1:6, 2, 3, byrow = F) ## Otra forma de crear una matriz b &lt;- 1:15 dim(b) &lt;- c(5,3) 2.6.4 Data Frames x &lt;- 1:4 n &lt;- 10 M &lt;- c(10, 35) a &lt;- data.frame(x, n, M) 2.6.5 Listas a &lt;- list(x, M) b &lt;- list(A = x, B = M) 2.6.6 Expresiones x &lt;- 3 y &lt;- 2.5 z &lt;- 1 exp &lt;- expression(x/(y + exp(z))) 2.7 Algunos ejemplos más avanzados 2.7.1 Operadores Aritméticos Comparación Lógicos Suma (+) Menor que (&lt;) NOT (!) Resta (-) Mayor que (&gt;) AND (&amp;) Multiplicación (*) Menor o igual que (&lt;=) OR (|) División (/) Mayor o igual que (&gt;=) Cierto (TRUE) Potencia (^) Igual (==) Falso (FALSE) Modulo (%%) Diferente (!=) División entera (%/%) 2.7.2 Ciclos, condiciones y funciones Al ser R un lenguaje de programación podemos usar: ciclos ## Ciclo for for (anio in c(2000,2001,2002,2003,2004,2005,2006,2007)){ print(paste(&quot;Cuenta&quot;,anio)) } ## Ciclo while i &lt;- 1 while(i &lt; 10){ print(i) i &lt;- i+1 } condiciones for (i in 1:10){ ## Condición if if(!i %% 2){ next } print(i) } Particularmente en la programación con R, será de mucha utilidad aprender a crear funciones: funcionfactorial&lt;-function(a){ res &lt;- 1 if(a&lt;0){ return(&quot;No existen factoriales de números negativos.&quot;) } else if(a==0){ return(res) } else{ for(i in 1:a){ res &lt;- res*i } return(res) } } 2.8 Paquetes En R llamamos librerías o paquetes a conjuntos de funciones diseñados para un fin específico. Por ejemplo el paquete [ggplot2][ggplot2-github] contiene funciones diseñadas para crear gráficos usando una sintáxis llamada la gramática de gráficas. Para descargar alguna librería de nuestra interés debemos utilizar el siguiente código: install.packages(&quot;ggplot2&quot;) # Dentro de las comillas ponemos el nombre del paquete que queremos instalar Dado que se trata de una instalación, el código anterior solamente será necesario la primera vez que instalemos el paquete. Una vez instalado, necesitamos hacer que R sepa que queremos usar la funciones de ese paquete, para lo cual usamos el siguiente código: library(ggplot2) # El argumento de la función será el nombre del paquete previamente instalado "],
["notación.html", "Capítulo 3 Notación", " Capítulo 3 Notación A lo largo del libro usaremos la notación típica de estadística pero también haremos uso de la siguiente: \\(x^{(i)}\\): el conjunto de inputs (variables explicativas) \\(y^{(i)}\\): es la variable de output/salida (variable dependiente) que queremos predecir (ajustar) A la pareja \\((x^{(i)},y^{(i)})\\) le llamaremos ejemplo de entrenamiento El conjunto de entrenamiento se denota por: \\(\\{(x^{(i)},y^{(i)})|i\\in N\\}\\) De forma general, denotaremos por \\(\\mathcal{X}\\) al espacio de inputs y por \\(\\mathcal{Y}\\) al espacio de outputs N.B. Omitiremos el uso de indices en donde sea claro a qué nos referimos. "],
["glosario-dscml-estadística.html", "Capítulo 4 Glosario DSc/ML - Estadística", " Capítulo 4 Glosario DSc/ML - Estadística Machine Learning / Ciencia de Datos Estadística red, grafo (network, graphs) modelo (model) pesos (weigths) parámetros (parameters) aprendizaje (learning) ajuste (fiting) prueba, generalización (testing, generalization) ajuste en el conjunto de prueba aprendizaje supervisado (supervised learning) regresión, clasificación aprendizaje no supervisado (unsupervised learning) estimación de densidades, clusterización "],
["entrenamiento-de-modelos.html", "Capítulo 5 Entrenamiento de modelos", " Capítulo 5 Entrenamiento de modelos Se le denomina de esta manera a la acción de ajustar el mejor modelo a los datos. Formalmente se define como sigue: Dado un conjunto de entrenamiento \\((x^{(i)},y^{(i)})\\in(\\mathcal{X} \\times \\mathcal{Y})\\) el objetivo es aprender (ajustar) una función \\(h:\\mathcal{X}\\rightarrow \\mathcal{Y}\\) tal que \\(h(x)\\) sea un buen predictor de \\(y\\). La función \\(h\\) suele llamarse hipótesis. Cuando el conjunto \\(\\mathcal{Y}\\) es continuo, estamos frente a un problema de regresión. Si se trata de un conjunto discreto entonces tenemos un problema de clasificación. "],
["regresión-lineal.html", "Capítulo 6 Regresión Lineal 6.1 Un poco de história 6.2 Objetivos del análisis de regresión 6.3 El algorítmo de regresión lineal 6.4 Regresión lineal simple 6.5 Solución al problema de regresión lineal simple 6.6 Regresión lineal múltiple 6.7 Solución al problema de regresión lineal múltiple. 6.8 Aplicación en R", " Capítulo 6 Regresión Lineal 6.1 Un poco de história Los primeros problemas prácticos tipo regresión iniciaron en el siglo XVIII, relacionados con la navegación basada en la Astronomía. Legendre desarrolló el método de mínimo cuadrados en 1805. Gauss afirma que él desarrolló este método algunos años antes y demuestra, en 1809, que mínimos cuadrados proporciona una solución óptima cuando los errores se distribuyen normal. Francis Galton acuña el término regresión al utilizar el modelo para explicar el fenómeno de que los hijos de padres altos, tienden a ser altos en su generación, pero no tan altos como lo fueron sus padres en la propia, por lo que hay un efecto de regresión. El modelo de regresión lineal es, probablemente, el modelo de su tipo más conocido en estadística. El modelo de regresión se usa para explicar o modelar la relación entre una sola variable, \\(y\\), llamada dependiente o respuesta, y una o más variables predictoras, independientes, covariables, o explicativas, \\(x_1, x_2, ..., x_p\\). Si \\(p = 1\\), se trata de un modelo de regresión simple y si \\(p &gt; 1\\), de un modelo de regresión múltiple. En este modelo se asume que la variable de respuesta, \\(y\\), es aleatoria y las variables explicativas son fijas, es decir, no aleatorias. La variable de respuesta debe ser continua, pero los regresores pueden tener cualquier escala de medición. 6.2 Objetivos del análisis de regresión Existen varios objetivos dentro del análisis de regresión, entre otros: Determinar el efecto, o relación, entre las variables explicativas y la respuesta. Predicción de una observación futura. Describir de manera general la estructura de los datos. 6.3 El algorítmo de regresión lineal Sea \\(\\Phi: \\mathcal{X} \\rightarrow \\mathbb{R}^N\\) y consideremos la familia de hipótesis lineales \\[H=\\{x\\mapsto w \\cdot \\Phi(x)+b | w\\in\\mathbb{R}^N, b\\in\\mathbb{R}\\}\\] La regresión lineal consiste en buscar la hipótesis \\(h\\in H\\) con el menor error cuadrático medio, es decir, se debe resolver el problema de optimización: \\[\\min \\frac{1}{m}\\sum_{i=1}^{m}(h(x_i)-y_i)^2\\] 6.4 Regresión lineal simple Para este modelo supondremos que nuestra respuesta, \\(y\\), es explicada únicamente por una covariable, \\(x\\). Entonces, escribimos nuestro modelo como: \\[y^{(i)}=\\beta_0+\\beta_1x^{(i)}+\\epsilon^{(i)},\\ \\ i=1,2,\\dots,n\\] Como podemos observar, se ha propuesto una relación lineal entre la variable \\(y\\) y la variable explicativa \\(x\\), que es nuestro primer supuesto sobre el modelo: La relación funcional entre \\(x\\) y \\(y\\) es una línea recta. Observamos que la relación no es perfecta, ya que se agrega el término de error, \\(\\epsilon\\). Dado que la parte aleatoria del modelo es la variable \\(y\\), asumimos que al error se le “cargan” los errores de medición de \\(y\\), así como las perturbaciones que le pudieran ocasionar los términos omitidos en el modelo. Gauss desarrolló este modelo a partir de la teoría de errores de medición, que es de donde se desprenden los supuestos sobre este término: \\(\\mathbb{E}(\\epsilon^{(i)})=0\\) \\(\\mathbb{V}ar(\\epsilon^{(i)})=\\sigma^2\\) \\(\\mathbb{C}ov(\\epsilon^{(i)},\\epsilon^{(j)})=0, \\ \\forall i\\neq j\\) N.B. Los errores \\(\\epsilon^{(i)}\\) son variables aleatorias no observables. 6.5 Solución al problema de regresión lineal simple 6.5.1 Mínimos cuadrados ordinarios En una situación real, tenemos \\(n\\) observaciones de la variable de respuesta así como de la variable explicativa, que conforman las parejas de entrenamiento \\((x_i, y_i), \\ i = 1, 2, ..., n\\). Entonces, nuestro objetivo será encontrar la recta que mejor ajuste a los datos observados. Utilizaremos el método de mínimos cuadrados para estimar los parámetros del modelo, que consiste en minimizar la suma de los errores al cuadrado, esto es: \\[\\sum_{i=1}^n \\epsilon_i^2 = \\sum_{i=1}^n(y_i-(\\beta_0+\\beta_1x^{(i)}))^2\\] Al minimizar la expresión anteriore obtenemos las siguientes expresiones para los estimadores: \\[\\hat{\\beta_1}=\\frac{\\sum_{i=1}^ny_i(x_i-\\bar{x})}{\\sum_{i=1}^n(x_i-\\bar{x})^2}\\] \\[\\hat{\\beta_0}=\\bar{y}-\\hat{\\beta_1}\\bar{x}\\] Una desventaja del método de mínimos cuadrados, es que no se pueden hacer procesos de inferencia sobre los parámetros de interés \\(\\beta_0\\) y \\(\\beta_1\\); procesos como intervalos de confianza o pruebas de hipótesis. Para subsanar esta deficiencia, es necesario asumir una distribución para el error, \\(\\epsilon_i\\), que, siguiendo la teoría general de errores, se asume que tiene distribución normal, con media cero y varianza \\(\\sigma^2\\). Este supuesto garantiza que las distribuciones de \\(y_i,\\ \\hat{\\beta_0},\\ \\hat{\\beta_1}\\) sean normales, lo que permite tanto la construcción de intervalos de confianza como de pruebas de hipótesis. N.B El estimador de \\(\\sigma^2\\) está dado por \\(\\hat{\\sigma^2}=\\frac{\\sum_{i=1}^n(y_i-\\hat{y_i})^2}{n-2}\\) 6.5.1.1 Pruebas de hipótesis En el modelo de regresión lineal simple, la prueba de hipótesis más importante es determinar si estadísticamente existe la dependencia líneal entre \\(x\\) y \\(y\\), y que no sea producto del muestreo (debido al azar). Es decir, realizar la prueba de hipótesis: \\[H_0:\\beta_1=0 \\ vs.\\ H_a:\\beta_1\\neq 0\\] No rechazar la hipótesis nula, implicaría que la variable \\(x\\) no ayuda a explicar a \\(y\\) o bien que, tal vez, la relación entre estas variables no es lineal. En este modelo, esta última explicación es un poco cuestionable, ya que se parte, de inicio, del diagrama de dispersión de los datos. Si rechazamos la hipótesis nula, implicará que \\(x\\) es importante para explicar la respuesta \\(y\\) y que la relación lineal entre ellas puede ser adecuada. Rechazar esta hipótesis nula, también podría implicar que existe una relación lineal entre las variables pero, tal vez, se pueda mejorar el ajuste con algún otro término no lineal. 6.5.1.2 Interpretación de los parámetros Cuando se tiene una recta en el sentido determinista, los parámetros \\(\\beta_0\\) y \\(\\beta_1\\) tienen una interpretación muy clara; \\(\\beta_0\\) se interpreta como el valor de \\(y\\) cuando \\(x\\) es igual a cero y \\(\\beta_1\\) como el cambio que experimenta la variable de respuesta \\(y\\) por unidad de cambio en \\(x\\). La interpretación, desde el punto de vista estadístico, de los parámetros estimados en el modelo de regresión es muy similar: \\(\\hat{\\beta_0}\\) es el promedio esperado de la respuesta \\(y\\) cuando \\(x = 0\\) (este parámetro tendrá una interpretación dentro del modelo, si tiene sentido que \\(x\\) tome el valor cero, de lo contrario, no tiene una interpretación razonable) y \\(\\hat{\\beta_1}}\\) es el cambio promedio o cambio esperado en \\(y\\) por unidad de cambio en \\(x\\). 6.6 Regresión lineal múltiple La mayoría de los fenómenos reales son multicausales, por esta razón, un modelo de regresión más acorde a estudios reales es el modelo de regresión lineal múltiple, que es la generalización del modelo simple. En este modelo supondremos que la variable de respuesta, \\(y\\), puede explicarse a través de una colección de \\(k\\) covariables \\(x_1,\\dots,x_k\\). El modelo se escribe de la siguiente manera: \\[y_i = \\beta_0+\\beta_1 x_1^{(i)}+\\beta_2 x_2^{(i)}+\\dots++\\beta_k x_k^{(i)}+\\epsilon_i\\] Al igual que en el caso simple, los parámetros del modelo se pueden estimar por mínimos cuadrados, con el inconveniente de que no se pueden realizar inferencias sobre ellos. Nuevamente, para poder hacer intervalos de confianza y pruebas de hipótesis sobre los verdaderos parámetros hay que suponer que el vector de errores se distribuye normal, en este caso multivariada, es decir: \\[\\epsilon\\sim N_n(0,\\sigma^2\\mathbb{I})\\] Esta estructura del error permite tener las mismas propiedades distribucionales que en regresión simple, es decir, \\(y_i\\) se distribuye normal y \\(\\beta_i\\) tiene distribución normal, facilitando las inferencias sobre cada parámetro y la construcción de intervalos de predicción para las \\(y\\)’s. 6.7 Solución al problema de regresión lineal múltiple. 6.7.1 Ecuaciones normales Las expresiones para estimar los parámetros involucrados en el modelo son: \\[\\hat{\\beta}=(X^TX)^{-1}X^Ty\\] \\[\\hat{\\sigma}^2=\\frac{\\sum_{i=1}^n(y_i-\\hat{y_i})^2}{n-p}\\] donde \\(p=k+1\\) es el número total de parámetros en el modelo. Tanto en el modelo simple como en el múltiple, la variación total de las \\(y\\)’s se puede descomponer en una parte que explica el modelo, i.e., los \\(k\\) regresores o variables explicativas y otra no explicada por estas variables, llamada error. \\[\\sum_{i=1}^n(y_i-\\bar{y})^2=\\sum_{i=1}^n(\\hat{y_i}-\\bar{y})^2+\\sum_{i=1}^n(\\hat{y_i}-y_i)^2\\] #### Pruebas de hipótesis La descomposición anterior ayuda para realizar la importante prueba de hipótesis: \\[H_0:\\beta_1=\\beta_2=\\dots=\\beta_k=0\\ vs.\\ H_a:\\beta_i\\neq0 \\ p.a. \\ i\\] misma que se realiza a través del cociente entre los errores cuadráticos medios: \\[F_0=\\frac{SS_R/k}{SS_E/(n-k-1)}=\\frac{MS_R}{MS_E}\\sim F_{(k,n-k-1)}\\] Esta estadística se desprende de la tabla de análisis de varianza, que es muy similar a la tabla ANOVA que se utiliza para hacer pruebas de hipótesis. En este caso la tabla es: Fuente de variación Grados de libertad Suma de cuadrados Cuadrados medios F Regresión k \\(SS_R\\) \\(MS_R=SS_R/k\\) Error n-k-1 \\(SS_E\\) \\(MS_E=SS_E/(n-k-1)\\) \\(F=\\frac{MS_R}{MS_E}\\) Total n-1 \\(S_{yy}\\) Por lo general, esta estadística rechaza la hipótesis nula, ya que de lo contrario, implicaría que ninguna de las variables contribuye a explicar la respuesta, \\(y\\). Como se puede observar en la hipótesis alternativa, el rechazar \\(H_0\\) solo implica que al menos uno de los regresores contribuye significativamente a explicar \\(y\\). Asimismo, el rechazar \\(H_0\\) no implica que todos contribuyan ni tampoco dice cuál o cuáles contribuyen, por esta razón, una salida estándar de regresión múltiple tiene pruebas individuales sobre la significancia de cada regresor en el modelo. El estadístico para hacer tanto los contrastes de hipótesis como los intervalos de confianza individuales, es: \\[t=\\frac{\\hat{\\beta_i}-\\beta_0^{(i)}}{\\sqrt{\\hat{\\mathbb{V}ar}(\\hat{\\beta_i})}}\\sim t_{(n-p)}\\] Podemos apreciar que los constrastes de hipótesis se pueden hacer contra cualquier valor particular del parámetro \\(\\beta_0^{(i)}\\), en general. No obstante, en las pruebas estándar sobre los parámetros de un modelo, este valor particular es 0, ya que se intenta determinar si la variable asociada al \\(i\\)-ésimo parámetro es estadísticamente significativa para explicar la respuesta. Por lo que el estadístico para este caso es: \\[t=\\frac{\\hat{\\beta_i}}{\\sqrt{\\hat{\\mathbb{V}ar}(\\hat{\\beta_i})}}\\sim t_{(n-p)}\\] De este estadístico se desprenden también los intervalos de confianza para cada parámetro: \\[\\beta_i\\in(\\hat{\\beta_i}\\pm t_{(n-p,1-\\alpha/2)} \\sqrt{\\hat{\\mathbb{V}ar} (\\hat{\\beta_i})})\\] #### Interpretación de los parámetros La interpretación de cada parámetro es similar a la del coeficiente de regresión \\(\\hat{\\beta_1}\\) en el modelo simple, anexando la frase: “manteniendo constantes el resto de las variables”. Esto es, \\(\\hat{\\beta_i}}\\) es el cambio promedio o cambio esperado en \\(y\\) por unidad de cambio en \\(x_i\\), sin considerar cambio alguno en ninguna de las otras variables dentro del modelo, es decir, suponiendo que estas otras variables permanecen fijas. Esta interpretación es similar a la que se hace de la derivada parcial en un modelo determinista. Nuevamente, la interpretación de \\(\\hat{\\beta_0}\\) estará sujeta a la posibilidad de que, en este caso, todas las variables puedan tomar el valor cero. 6.7.1.1 Predicción de nuevos valores Uno de los usos más frecuentes del modelo de regresión es el de predecir un valor de la respuesta para un valor particular de las covariables en el modelo. Si la predicción se realiza para un valor de las covariables dentro del rango de observación de las mismas, se tratará de una interpolación, y si se realiza para un valor fuera de este rango, hablaremos de una extrapolación. En cualquiera de los dos casos, estaremos interesados en dos tipos de predicciones: Predicción de la respuesta media: \\(y_0=\\mathbb{E}(y|X_0)\\) Predicción de una nueva observación: \\(y_0\\) En ambos casos, la estimación puntual es la misma: \\(\\hat{y_0}=X_0^T\\hat{\\beta}\\) Lo que difiere es el intervalo de predicción. Para la respuesta media es: \\(y_0=(\\hat{y_0}\\pm t_{(n-p,1-\\alpha/2)}\\sqrt{\\hat{\\sigma^2}X_0^T(X^TX)^{-1}X_0})\\) Y para predecir una observación: \\(y_0=(\\hat{y_0}\\pm t_{(n-p,1-\\alpha/2)}\\sqrt{\\hat{\\sigma^2}(1+X_0^T(X^TX)^{-1}X_0)})\\) 6.7.1.2 Coeficiente de determinación Un primer elemento de juicio sobre el modelo de regresión lo constituye el coeficiente de determinación \\(R^2\\), que es la proporción de variabilidad de las \\(y\\)’s que es explicada por las \\(x\\)’s y que se escribe como: \\[R^2=\\frac{SS_R}{S_{yy}}=1-\\frac{SS_E}{S_{yy}}\\] Una \\(R^2\\) cercana a uno implicaría que mucha de la variabilidad de la respuesta es explicada por el conjunto de regresores incluidos en el modelo. Es deseable tener una \\(R^2\\) grande en nuestro modelo, pero esto no significa, como mucha gente piensa, que ya el modelo está bien ajustado. 6.7.2 Evaluación de supuestos Los dos modelos de regresión presentados, el simple y el múltiple, se construyeron sobre los supuestos de: La relación funcional entre la variable de respuesta \\(y\\) y cada regresor \\(x_i\\) es lineal La esperanza de los errores es cero, \\(\\mathbb{E}(\\epsilon_i=0)\\) La varianza de los errores es constante, \\(\\mathbb{V}ar(\\epsilon_i) = \\sigma^2\\) Los errores no están correlacionados, \\(\\mathbb{C}ov(\\epsilon_i, \\epsilon_j) = 0;\\ i\\neq j\\) Los errores tienen distribución normal con media cero y varianza \\(\\sigma^2\\) Entonces, para garantizar que el modelo es adecuado, es indispensable verificar estos supuestos. 6.7.2.1 Residuos Los elementos más importantes para verificar estos supuestos son los residuos, definidos como: \\[e_i=y_i-\\hat{y}_i\\] Estos residuos representan la discrepancia entre la respuesta predicha por el modelo ajustado, \\(\\hat{y}_i\\) y el correspondiente valor observado, \\(y_i\\). En la literatura de regresi ́on lineal existen cuatro tipos de residuos, a saber Residuo crudo: \\(e_i\\) Residuo estandarizado: \\(d_i=\\frac{e_i}{\\sqrt{\\hat{\\sigma}^2}}\\) Residuo estudentizado interno: \\(r_i=\\frac{e_i}{\\sqrt{\\hat{\\sigma}^2(1-h_{ii}})}\\) Residuo estudentizado externo: \\(t_i=\\frac{e_i}{\\sqrt{\\hat{\\sigma_{(-i)}}^2(1-h_{ii})}}\\) Estos residuos se utilizan en los distintos procedimientos para evaluar los supuestos y lo adecuado del ajuste del modelo. La mayoría de las pruebas conocidas para la verificación de los supuestos, son pruebas gráficas. Indudablemente, la prueba más importante es sobre la normalidad de los errores, ya que sobre este supuesto descansan todas la inferencias de este modelo. La manera de verificarlo es a través de la gráfica conocida como QQ-plot o QQ-norm, que grafica los cuantiles teóricos de una distribución normal (eje x) vs. los cuantiles asociados a los residuos. Entonces, si los residuos realmente provienen de una normal, la gráfica debe mostrar la función identidad. Fuertes desviaciones de esta línea darían evidencia de que los errores no se distribuyen normal. 6.7.2.2 Linealidad de los predictores La manera estándar de evaluar la linealidad de las variables explicativas es a través de la gráfica de cada una de ellas contra los residuos. Si la variable en cuestión ingresa al modelo de manera lineal, esta gráfica debe mostrar un patrón totalmente aleatorio entre los puntos dispuestos en ella. Cuando la variable explicativa es politómica, este tipo de gráficas son poco ilustrativas en este sentido. 6.7.2.3 Supuestos sobre los errores Si la gráfica entre los valores ajustados y los residuos estandarizados, muestra un patrón aleatorio, es simétrica alrededor del cero y los puntos están comprendidos entre los valores -2 y 2, entonces se tendrá evidencia de que los errores tienen media cero, varianza constante y no están correlacionados. Los métodos mostrados hasta ahora, permiten evaluar el modelo de manera global y no por cada observación dentro del mismo. Dado que una observación puede resultar determinante sobre alguna(s) característica(s) del modelo, es conveniente verificar el impacto que cada observación pueda tener en los distintos aspectos del modelo. Las estadísticas para evaluar el impacto que tiene una observación sobre todo el vector de parámetros, alguno de los regresores y sobre los valores predichos, se basan en la misma idea, que consiste en cuantificar el cambio en la característica de interés con y sin la observación que se está evaluando. 6.7.2.3.1 Puntos palanca Antes de presentar las estadísticas que servirán para hacer este diagnóstico, introduciremos un elemento que es común a ellas: la llamada palanca (leverage) de una observación. Recordemos que el ajuste del modelo se expresaba como: \\[\\hat{\\beta}=(X^TX)^{-1}X^Ty \\Rightarrow \\hat{y}=X\\hat{\\beta}=Hy\\] Con \\(H\\) conocida como la matriz sombrero. Un resultado fundamental sobre esta matriz sombrero es: \\[\\mathbb{V}ar(e)=(I-H)\\sigma^2 \\Rightarrow \\mathbb{V}ar(e_i)=(1-h_i)\\sigma^2\\] Con \\(h_i\\) el i-ésimo elemento de la diagonal de la matriz \\(H\\). Observemos que esta palanca sólo depende de \\(X\\), entonces, una observación con una palanca, \\(h_i\\), grande, es aquella con valores extremos en alguna(s) de su(s) covariable(s). Ya que el promedio de las \\(h_i&#39;s\\) es \\(p/n\\), consideraremos una observación con palanca grande si su palanca es mayor a \\(2p/n\\). En este sentido, \\(h_i\\) corresponde a la distancia de Mahalanobis de \\(X\\) definida como \\((X-\\bar{X})^T\\hat{\\Sigma}^{-1}(X-\\bar{X})\\). La dependencia de las estadísticas para el diagnóstico de las observaciones, estriba en que sus cálculos dependen de los valores de la palanca de cada individuo. Estas estadísticas son: Distancia de Cook Dfbetas Dffits Distancia de Cook: Sirve para determinar si una observación es influyente en todo el vector de parámetros. Una observación se considera influyente, si su distancia de Cook sobrepasa el valor uno. ## List of 93 ## $ line :List of 6 ## ..$ colour : chr &quot;black&quot; ## ..$ size : num 0.5 ## ..$ linetype : num 1 ## ..$ lineend : chr &quot;butt&quot; ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ rect :List of 5 ## ..$ fill : chr &quot;white&quot; ## ..$ colour : chr &quot;black&quot; ## ..$ size : num 0.5 ## ..$ linetype : num 1 ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_rect&quot; &quot;element&quot; ## $ text :List of 11 ## ..$ family : chr &quot;&quot; ## ..$ face : chr &quot;plain&quot; ## ..$ colour : chr &quot;black&quot; ## ..$ size : num 11 ## ..$ hjust : num 0.5 ## ..$ vjust : num 0.5 ## ..$ angle : num 0 ## ..$ lineheight : num 0.9 ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ title : NULL ## $ aspect.ratio : NULL ## $ axis.title : NULL ## $ axis.title.x :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 2.75points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.x.top :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 2.75points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.x.bottom : NULL ## $ axis.title.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : num 90 ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 2.75points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.y.left : NULL ## $ axis.title.y.right :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : num -90 ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 2.75points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : chr &quot;grey30&quot; ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 2.2points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x.top :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 2.2points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x.bottom : NULL ## $ axis.text.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 1 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 2.2points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.y.left : NULL ## $ axis.text.y.right :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 2.2points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.ticks : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ axis.ticks.x : NULL ## $ axis.ticks.x.top : NULL ## $ axis.ticks.x.bottom : NULL ## $ axis.ticks.y : NULL ## $ axis.ticks.y.left : NULL ## $ axis.ticks.y.right : NULL ## $ axis.ticks.length : &#39;simpleUnit&#39; num 2.75points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ axis.ticks.length.x : NULL ## $ axis.ticks.length.x.top : NULL ## $ axis.ticks.length.x.bottom: NULL ## $ axis.ticks.length.y : NULL ## $ axis.ticks.length.y.left : NULL ## $ axis.ticks.length.y.right : NULL ## $ axis.line : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ axis.line.x : NULL ## $ axis.line.x.top : NULL ## $ axis.line.x.bottom : NULL ## $ axis.line.y : NULL ## $ axis.line.y.left : NULL ## $ axis.line.y.right : NULL ## $ legend.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ legend.margin : &#39;margin&#39; num [1:4] 5.5points 5.5points 5.5points 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ legend.spacing : &#39;simpleUnit&#39; num 11points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ legend.spacing.x : NULL ## $ legend.spacing.y : NULL ## $ legend.key : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ legend.key.size : &#39;simpleUnit&#39; num 1.2lines ## ..- attr(*, &quot;unit&quot;)= int 3 ## $ legend.key.height : NULL ## $ legend.key.width : NULL ## $ legend.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ legend.text.align : NULL ## $ legend.title :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ legend.title.align : NULL ## $ legend.position : chr &quot;right&quot; ## $ legend.direction : NULL ## $ legend.justification : chr &quot;center&quot; ## $ legend.box : NULL ## $ legend.box.just : NULL ## $ legend.box.margin : &#39;margin&#39; num [1:4] 0cm 0cm 0cm 0cm ## ..- attr(*, &quot;unit&quot;)= int 1 ## $ legend.box.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ legend.box.spacing : &#39;simpleUnit&#39; num 11points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ panel.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ panel.border : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ panel.spacing : &#39;simpleUnit&#39; num 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ panel.spacing.x : NULL ## $ panel.spacing.y : NULL ## $ panel.grid :List of 6 ## ..$ colour : chr &quot;grey92&quot; ## ..$ size : NULL ## ..$ linetype : NULL ## ..$ lineend : NULL ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ panel.grid.major : NULL ## $ panel.grid.minor :List of 6 ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 0.5 ## ..$ linetype : NULL ## ..$ lineend : NULL ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ panel.grid.major.x : NULL ## $ panel.grid.major.y : NULL ## $ panel.grid.minor.x : NULL ## $ panel.grid.minor.y : NULL ## $ panel.ontop : logi FALSE ## $ plot.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ plot.title :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 1.2 ## ..$ hjust : num 0 ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 5.5points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.title.position : chr &quot;panel&quot; ## $ plot.subtitle :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 5.5points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.caption :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : num 1 ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 5.5points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.caption.position : chr &quot;panel&quot; ## $ plot.tag :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 1.2 ## ..$ hjust : num 0.5 ## ..$ vjust : num 0.5 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.tag.position : chr &quot;topleft&quot; ## $ plot.margin : &#39;margin&#39; num [1:4] 5.5points 5.5points 5.5points 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ strip.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ strip.background.x : NULL ## $ strip.background.y : NULL ## $ strip.placement : chr &quot;inside&quot; ## $ strip.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : chr &quot;grey10&quot; ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 4.4points 4.4points 4.4points 4.4points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ strip.text.x : NULL ## $ strip.text.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : num -90 ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ strip.switch.pad.grid : &#39;simpleUnit&#39; num 2.75points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ strip.switch.pad.wrap : &#39;simpleUnit&#39; num 2.75points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ strip.text.y.left :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : num 90 ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## - attr(*, &quot;class&quot;)= chr [1:2] &quot;theme&quot; &quot;gg&quot; ## - attr(*, &quot;complete&quot;)= logi TRUE ## - attr(*, &quot;validate&quot;)= logi TRUE Dfbetas: Sirven para determinar si una observación es influyente en alguno de los coeficientes de regresión. Hay un dfbeta por cada parámetro dentro del modelo, incluido, por supuesto, el de la ordenada al origen. La regla de dedo es que la observación \\(i\\) es influyente en el j-ésimo coeficiente de regresión si: \\[|Dfbetas_{j,i}|&gt;\\frac{2}{\\sqrt{n}}\\] Dffits: Se utilizan para determinar si una observación es influyente en la predicción de \\(y\\). Se dice que la i-ésima observación es influyente para predecir \\(y\\), si: \\[|Dffits_i|&gt;2\\sqrt{\\frac{p}{n}}\\] 6.7.2.4 Multicolinealidad El modelo de regresión lineal múltiple, se construye bajo el supuesto de que los regresores son ortogonales, i.e., son independientes. Desafortunadamente, en la mayoría de las aplicaciones el conjunto de regresores no es ortogonal. Algunas veces, esta falta de ortogonalidad no es seria; sin embargo, en algunas otras los regresores están muy cerca de una perfecta relación lineal, en tales casos las inferencias realizadas a través del modelo de regresión lineal pueden ser erróneas. Cuando hay una cercana dependencia lineal entre los regresores, se dice que estamos en presencia de un problema de multicolinealidad. Efectos de la multicolinealidad: Varianzas de los coeficientes estimados son muy grandes. Los estimadores calculados de distintas sub muestras de la misma población, pueden ser muy diferentes. La significancia de algún regresor se puede ver afectada (volverse no significativo) por que su varianza es más grande de lo que debería ser en realidad o por la correlación de la variable con el resto dentro del modelo. Es común que algún signo de un parámetro cambie, haciendo ilógica su interpretación dentro del modelo. 6.7.2.4.1 ¿Cómo detectar multicolinealidad? Matriz de correlación. Examinar las correlaciones entre pares de variables: \\[r_{ij}\\ \\ \\ i, j = 1, 2, \\dots, k\\ \\ i\\neq j\\] Pero, si dos o más regresores están linealmente relacionados, es posible que ninguna de las correlaciones entre cada par de variables, sea grande. Factor de inflación de la varianza. \\[VIF_j=(1-R_j^2)^{-1}\\] Con \\(R_j^2\\) el coeficiente de determinación del modelo de regresión entre el j-ésimo regresor, \\(x_j\\) (tomado como variable de respuesta) y el resto de los regresores \\(x_i\\), \\(i\\neq j\\). Experiencias prácticas indican que si algunos de los VIF’s excede a 10, su coeficiente asociado es pobremente estimado por el modelo debido a multicolinealidad. Análisis del eigensistema. Basado en los eigenvalores de la matriz \\(X^TX\\). Número de condición. \\[K=\\frac{\\lambda_{max}}{\\lambda_{min}}\\] Si el número de condición es menor que 100, no existen problemas serios de multicolinealidad. Si está entre 100 y 1000 existe de moderada a fuerte multicolinealidad y si excede a 1000, hay severa multicolinealidad. Índice de condición. \\[k_j=\\frac{\\lambda{max}}{\\lambda_j}\\] Si el índice de condición es menor que 10, no hay ningún problema. Si está entre 10 y 30, hay moderada multicolinealidad, y si es mayor que 30, existe una fuerte colinealidad en la j-ésima variable en el modelo. N.B. En algunos paquetes estos índices se presentan aplicando la raíz cuadrada a su expresión, entonces hay que extraer raíz a los puntos de corte de los criterios correspondientes. 6.7.2.5 Relación funcional Un supuesto importante en el modelo de regresión es el que considera que debe existir una relación funcional lineal entre cada regresor y la variable de respuestas. Pero, ¿qué debemos hacer si no se cumple esta relación lineal de la respuesta con alguno(s) de los regresor(es)? Primero, ya dijimos que este supuesto se evalúa realizando la gráfica de dispersión entre los residuos del modelo y los valores de la variable en cuestión. Cuando no hay una asociación lineal entre la respuesta y la covariable, generalmente este diagrama de dispersión muestra un patrón (tendencia) que sugiere qué tipo de transformación se debería hacer a la covariable para lograr linealidad con la respuesta. Debe quedar claro que la transformación puede realizarse a la variable explicativa o a la variable de respuesta. A muchos investigadores no les gusta transformar la respuesta porque argumentan que pierden interpretabilidad del modelo. Aunque esto puede ser cierto, existen transformaciones de la respuesta que pueden regresarse para interpretar el modelo con la respuesta original. ## List of 93 ## $ line :List of 6 ## ..$ colour : chr &quot;black&quot; ## ..$ size : num 0.5 ## ..$ linetype : num 1 ## ..$ lineend : chr &quot;butt&quot; ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ rect :List of 5 ## ..$ fill : chr &quot;white&quot; ## ..$ colour : chr &quot;black&quot; ## ..$ size : num 0.5 ## ..$ linetype : num 1 ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_rect&quot; &quot;element&quot; ## $ text :List of 11 ## ..$ family : chr &quot;&quot; ## ..$ face : chr &quot;plain&quot; ## ..$ colour : chr &quot;black&quot; ## ..$ size : num 11 ## ..$ hjust : num 0.5 ## ..$ vjust : num 0.5 ## ..$ angle : num 0 ## ..$ lineheight : num 0.9 ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ title : NULL ## $ aspect.ratio : NULL ## $ axis.title : NULL ## $ axis.title.x :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 2.75points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.x.top :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 2.75points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.x.bottom : NULL ## $ axis.title.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : num 90 ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 2.75points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.y.left : NULL ## $ axis.title.y.right :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : num -90 ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 2.75points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : chr &quot;grey30&quot; ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 2.2points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x.top :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 2.2points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x.bottom : NULL ## $ axis.text.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 1 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 2.2points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.y.left : NULL ## $ axis.text.y.right :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 2.2points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.ticks : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ axis.ticks.x : NULL ## $ axis.ticks.x.top : NULL ## $ axis.ticks.x.bottom : NULL ## $ axis.ticks.y : NULL ## $ axis.ticks.y.left : NULL ## $ axis.ticks.y.right : NULL ## $ axis.ticks.length : &#39;simpleUnit&#39; num 2.75points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ axis.ticks.length.x : NULL ## $ axis.ticks.length.x.top : NULL ## $ axis.ticks.length.x.bottom: NULL ## $ axis.ticks.length.y : NULL ## $ axis.ticks.length.y.left : NULL ## $ axis.ticks.length.y.right : NULL ## $ axis.line : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ axis.line.x : NULL ## $ axis.line.x.top : NULL ## $ axis.line.x.bottom : NULL ## $ axis.line.y : NULL ## $ axis.line.y.left : NULL ## $ axis.line.y.right : NULL ## $ legend.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ legend.margin : &#39;margin&#39; num [1:4] 5.5points 5.5points 5.5points 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ legend.spacing : &#39;simpleUnit&#39; num 11points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ legend.spacing.x : NULL ## $ legend.spacing.y : NULL ## $ legend.key : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ legend.key.size : &#39;simpleUnit&#39; num 1.2lines ## ..- attr(*, &quot;unit&quot;)= int 3 ## $ legend.key.height : NULL ## $ legend.key.width : NULL ## $ legend.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ legend.text.align : NULL ## $ legend.title :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ legend.title.align : NULL ## $ legend.position : chr &quot;right&quot; ## $ legend.direction : NULL ## $ legend.justification : chr &quot;center&quot; ## $ legend.box : NULL ## $ legend.box.just : NULL ## $ legend.box.margin : &#39;margin&#39; num [1:4] 0cm 0cm 0cm 0cm ## ..- attr(*, &quot;unit&quot;)= int 1 ## $ legend.box.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ legend.box.spacing : &#39;simpleUnit&#39; num 11points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ panel.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ panel.border : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ panel.spacing : &#39;simpleUnit&#39; num 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ panel.spacing.x : NULL ## $ panel.spacing.y : NULL ## $ panel.grid :List of 6 ## ..$ colour : chr &quot;grey92&quot; ## ..$ size : NULL ## ..$ linetype : NULL ## ..$ lineend : NULL ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ panel.grid.major : NULL ## $ panel.grid.minor :List of 6 ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 0.5 ## ..$ linetype : NULL ## ..$ lineend : NULL ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ panel.grid.major.x : NULL ## $ panel.grid.major.y : NULL ## $ panel.grid.minor.x : NULL ## $ panel.grid.minor.y : NULL ## $ panel.ontop : logi FALSE ## $ plot.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ plot.title :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 1.2 ## ..$ hjust : num 0 ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 5.5points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.title.position : chr &quot;panel&quot; ## $ plot.subtitle :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 5.5points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.caption :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : num 1 ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 5.5points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.caption.position : chr &quot;panel&quot; ## $ plot.tag :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 1.2 ## ..$ hjust : num 0.5 ## ..$ vjust : num 0.5 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.tag.position : chr &quot;topleft&quot; ## $ plot.margin : &#39;margin&#39; num [1:4] 5.5points 5.5points 5.5points 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ strip.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ strip.background.x : NULL ## $ strip.background.y : NULL ## $ strip.placement : chr &quot;inside&quot; ## $ strip.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : chr &quot;grey10&quot; ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 4.4points 4.4points 4.4points 4.4points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ strip.text.x : NULL ## $ strip.text.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : num -90 ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ strip.switch.pad.grid : &#39;simpleUnit&#39; num 2.75points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ strip.switch.pad.wrap : &#39;simpleUnit&#39; num 2.75points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ strip.text.y.left :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : num 90 ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## - attr(*, &quot;class&quot;)= chr [1:2] &quot;theme&quot; &quot;gg&quot; ## - attr(*, &quot;complete&quot;)= logi TRUE ## - attr(*, &quot;validate&quot;)= logi TRUE Un problema asociado a esta identificación por parte del usuario, es que debe tener experiencia para asociar estas formas a una función analítica específica; hecho no necesariamente cierto. Por lo tanto, requiere de alguna herramienta técnica que pudiera auxiliarlo en esta labor. Un buen auxiliar, en el caso de que se crea que es necesario transformar la respuesta, es usar la llamada trasformación Box-Cox. 6.7.2.5.1 Transformación Box-Cox La transformación Box-Cox de la respuesta, es una función que sirve para normalizar la distribución del error, estabilizar la varianza de este error y mejorar la relación lineal entre \\(y\\) y las \\(X’s\\). Se define como: \\[y_i^{\\lambda} = \\left\\{ \\begin{array}{ll} \\frac{y_i^{\\lambda-1}}{\\lambda}, &amp; \\lambda \\neq 0;\\\\ ln(y_i), &amp; \\lambda=0 .\\end{array} \\right.\\] La siguiente tabla muestra el rango de valores de \\(\\lambda\\) que estarían asociados a una transformación analítica común. Rango \\(\\lambda\\) Transformación Asociada (-2.5, -1.5] \\(\\frac{1}{y^2}\\) (-1.5, -0.75] \\(frac{1}{y}\\) (-0.75, -0.25] \\(frac{1}{\\sqrt{y}}\\) (-0.25, 0.25] \\(ln(y)\\) (0.25, 0.75] \\(\\sqrt{y}\\) (0.75, 1.25] \\(y\\) (1.25, 2.5) \\(y^2\\) 6.7.2.5.2 Transformación Box-Tidwell Box y Tidwell implementan un proceso iterativo para encontrar la mejor transformación de las variables predictoras en el modelo de regresión lineal. Definiendo como \\(X_j^{\\gamma_j}\\) la correspondiente transformación Box-Tidwell de la variable \\(j\\). La tabla anterior para las transfomaciones analíticas de la respuesta, también aplican para estas transformaciones de los predictores. 6.8 Aplicación en R … Work in progres … "],
["regresión-logística.html", "Capítulo 7 Regresión logística", " Capítulo 7 Regresión logística "],
["modelos-lineales-generalizados.html", "Capítulo 8 Modelos lineales generalizados", " Capítulo 8 Modelos lineales generalizados "]
]
